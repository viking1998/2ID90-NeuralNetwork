<?xml version="1.0" encoding="UTF-8" standalone="yes"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" height="361px" style="width:381px;height:361px;" version="1.1" viewBox="0 0 381 361" width="381px"><defs><filter height="300%" id="f1" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><rect fill="#FEFECE" filter="url(#f1)" height="48" style="stroke: #A80036; stroke-width: 1.5;" width="125" x="126.5" y="8"/><ellipse cx="141.5" cy="24" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M144.4688,29.6406 Q143.8906,29.9375 143.25,30.0859 Q142.6094,30.2344 141.9063,30.2344 Q139.4063,30.2344 138.0859,28.5859 Q136.7656,26.9375 136.7656,23.8125 Q136.7656,20.6875 138.0859,19.0313 Q139.4063,17.375 141.9063,17.375 Q142.6094,17.375 143.2578,17.5313 Q143.9063,17.6875 144.4688,17.9844 L144.4688,20.7031 Q143.8438,20.125 143.25,19.8516 Q142.6563,19.5781 142.0313,19.5781 Q140.6875,19.5781 140,20.6484 Q139.3125,21.7188 139.3125,23.8125 Q139.3125,25.9063 140,26.9766 Q140.6875,28.0469 142.0313,28.0469 Q142.6563,28.0469 143.25,27.7734 Q143.8438,27.5 144.4688,26.9219 L144.4688,29.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="93" x="155.5" y="28.1543">FullyConnected</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="127.5" x2="250.5" y1="40" y2="40"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="127.5" x2="250.5" y1="48" y2="48"/><polygon fill="#FBFB77" filter="url(#f1)" points="6,116,6,352.9922,372,352.9922,372,126,362,116,6,116" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FBFB77" points="6,116,6,352.9922,372,352.9922,372,126,362,116,193,116,189,56.0246,185,116,6,116" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="362" x2="362" y1="116" y2="126"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="372" x2="362" y1="126" y2="126"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="44" x="12" y="133.0669">Tensor</text><text fill="#000000" font-family="sans-serif" font-size="13" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="69" x="60" y="133.0669">inference</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="78" x="129" y="133.0669">( Tensor in )</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="0" x="20" y="148.1997"/><text fill="#000000" font-family="sans-serif" font-size="13" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="283" x="20" y="148.1997">// duplicate input, needed by backprop</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="0" x="20" y="163.3325"/><text fill="#000000" font-family="sans-serif" font-size="13" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="10" x="20" y="163.3325">if</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="323" x="34" y="163.3325">(inTrainingMode) lastInput = in.getValues().dup();</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="0" x="20" y="178.4653"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="0" x="20" y="193.5981"/><text fill="#000000" font-family="sans-serif" font-size="13" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="307" x="20" y="193.5981">// weights: inputs x outputs; bias: outputs</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="219" x="20" y="208.731">INDArray r := in * weights  + bias</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="0" x="20" y="223.8638"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="0" x="20" y="238.9966"/><text fill="#000000" font-family="sans-serif" font-size="13" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="252" x="20" y="238.9966">// duplicate r, needed by backprop</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="0" x="20" y="254.1294"/><text fill="#000000" font-family="sans-serif" font-size="13" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="10" x="20" y="254.1294">if</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="273" x="34" y="254.1294">(inTrainingMode) lastPreOutput := r.dup();</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="0" x="20" y="269.2622"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="0" x="20" y="284.395"/><text fill="#000000" font-family="sans-serif" font-size="13" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="320" x="20" y="284.395">// apply activation function to elements of r</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="101" x="20" y="299.5278">f.activation( r );</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="0" x="112" y="314.6606"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="0" x="20" y="329.7935"/><text fill="#000000" font-family="sans-serif" font-size="13" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="186" x="20" y="329.7935">// return inference tensor</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="0" x="20" y="344.9263"/><text fill="#000000" font-family="sans-serif" font-size="13" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="80" x="20" y="344.9263">return new</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="58" x="104" y="344.9263">Tensor(r,</text><text fill="#000000" font-family="sans-serif" font-size="13" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="30" x="166" y="344.9263">new</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="152" x="200" y="344.9263">TensorShape(outputs));</text></g></svg>